/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(SHARED_SCRIPT)

#include "JSWebKitSharedScript.h"

#include "Event.h"
#include "EventListener.h"
#include "Frame.h"
#include "JSDOMGlobalObject.h"
#include "JSEvent.h"
#include "JSEventListener.h"
#include "JSSharedScriptContext.h"
#include "RegisteredEventListener.h"
#include "SharedScriptContext.h"
#include "WebKitSharedScript.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSWebKitSharedScript);

/* Hash table */

static const HashTableValue JSWebKitSharedScriptTableValues[4] =
{
    { "onerror", DontDelete, (intptr_t)jsWebKitSharedScriptOnerror, (intptr_t)setJSWebKitSharedScriptOnerror },
    { "onload", DontDelete, (intptr_t)jsWebKitSharedScriptOnload, (intptr_t)setJSWebKitSharedScriptOnload },
    { "context", DontDelete|ReadOnly, (intptr_t)jsWebKitSharedScriptContext, (intptr_t)0 },
    { 0, 0, 0, 0 }
};

static JSC_CONST_HASHTABLE HashTable JSWebKitSharedScriptTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 3, JSWebKitSharedScriptTableValues, 0 };
#else
    { 8, 7, JSWebKitSharedScriptTableValues, 0 };
#endif

/* Hash table for prototype */

static const HashTableValue JSWebKitSharedScriptPrototypeTableValues[4] =
{
    { "addEventListener", DontDelete|Function, (intptr_t)jsWebKitSharedScriptPrototypeFunctionAddEventListener, (intptr_t)3 },
    { "removeEventListener", DontDelete|Function, (intptr_t)jsWebKitSharedScriptPrototypeFunctionRemoveEventListener, (intptr_t)3 },
    { "dispatchEvent", DontDelete|Function, (intptr_t)jsWebKitSharedScriptPrototypeFunctionDispatchEvent, (intptr_t)1 },
    { 0, 0, 0, 0 }
};

static JSC_CONST_HASHTABLE HashTable JSWebKitSharedScriptPrototypeTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 3, JSWebKitSharedScriptPrototypeTableValues, 0 };
#else
    { 8, 7, JSWebKitSharedScriptPrototypeTableValues, 0 };
#endif

const ClassInfo JSWebKitSharedScriptPrototype::s_info = { "WebKitSharedScriptPrototype", 0, &JSWebKitSharedScriptPrototypeTable, 0 };

JSObject* JSWebKitSharedScriptPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSWebKitSharedScript>(exec, globalObject);
}

bool JSWebKitSharedScriptPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSWebKitSharedScriptPrototypeTable, this, propertyName, slot);
}

bool JSWebKitSharedScriptPrototype::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticFunctionDescriptor<JSObject>(exec, &JSWebKitSharedScriptPrototypeTable, this, propertyName, descriptor);
}

const ClassInfo JSWebKitSharedScript::s_info = { "WebKitSharedScript", 0, &JSWebKitSharedScriptTable, 0 };

JSWebKitSharedScript::JSWebKitSharedScript(NonNullPassRefPtr<Structure> structure, JSDOMGlobalObject* globalObject, PassRefPtr<WebKitSharedScript> impl)
    : DOMObjectWithGlobalPointer(structure, globalObject)
    , m_impl(impl)
{
}

JSWebKitSharedScript::~JSWebKitSharedScript()
{
    impl()->invalidateEventListeners();
    forgetDOMObject(this, impl());
}

void JSWebKitSharedScript::markChildren(MarkStack& markStack)
{
    Base::markChildren(markStack);
    impl()->markEventListeners(markStack);
}

JSObject* JSWebKitSharedScript::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return new (exec) JSWebKitSharedScriptPrototype(JSWebKitSharedScriptPrototype::createStructure(globalObject->objectPrototype()));
}

bool JSWebKitSharedScript::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSWebKitSharedScript, Base>(exec, &JSWebKitSharedScriptTable, this, propertyName, slot);
}

bool JSWebKitSharedScript::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSWebKitSharedScript, Base>(exec, &JSWebKitSharedScriptTable, this, propertyName, descriptor);
}

JSValue jsWebKitSharedScriptOnerror(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    JSWebKitSharedScript* castedThis = static_cast<JSWebKitSharedScript*>(asObject(slot.slotBase()));
    UNUSED_PARAM(exec);
    WebKitSharedScript* imp = static_cast<WebKitSharedScript*>(castedThis->impl());
    if (EventListener* listener = imp->onerror()) {
        if (JSObject* jsFunction = listener->jsFunction(imp->scriptExecutionContext()))
            return jsFunction;
    }
    return jsNull();
}

JSValue jsWebKitSharedScriptOnload(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    JSWebKitSharedScript* castedThis = static_cast<JSWebKitSharedScript*>(asObject(slot.slotBase()));
    UNUSED_PARAM(exec);
    WebKitSharedScript* imp = static_cast<WebKitSharedScript*>(castedThis->impl());
    if (EventListener* listener = imp->onload()) {
        if (JSObject* jsFunction = listener->jsFunction(imp->scriptExecutionContext()))
            return jsFunction;
    }
    return jsNull();
}

JSValue jsWebKitSharedScriptContext(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    JSWebKitSharedScript* castedThis = static_cast<JSWebKitSharedScript*>(asObject(slot.slotBase()));
    UNUSED_PARAM(exec);
    WebKitSharedScript* imp = static_cast<WebKitSharedScript*>(castedThis->impl());
    return toJS(exec, castedThis->globalObject(), WTF::getPtr(imp->context()));
}

void JSWebKitSharedScript::put(ExecState* exec, const Identifier& propertyName, JSValue value, PutPropertySlot& slot)
{
    lookupPut<JSWebKitSharedScript, Base>(exec, propertyName, value, &JSWebKitSharedScriptTable, this, slot);
}

void setJSWebKitSharedScriptOnerror(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    WebKitSharedScript* imp = static_cast<WebKitSharedScript*>(static_cast<JSWebKitSharedScript*>(thisObject)->impl());
    JSDOMGlobalObject* globalObject = toJSDOMGlobalObject(imp->scriptExecutionContext(), exec);
    if (!globalObject)
        return;
    imp->setOnerror(globalObject->createJSAttributeEventListener(value));
}

void setJSWebKitSharedScriptOnload(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    WebKitSharedScript* imp = static_cast<WebKitSharedScript*>(static_cast<JSWebKitSharedScript*>(thisObject)->impl());
    JSDOMGlobalObject* globalObject = toJSDOMGlobalObject(imp->scriptExecutionContext(), exec);
    if (!globalObject)
        return;
    imp->setOnload(globalObject->createJSAttributeEventListener(value));
}

JSValue JSC_HOST_CALL jsWebKitSharedScriptPrototypeFunctionAddEventListener(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.inherits(&JSWebKitSharedScript::s_info))
        return throwError(exec, TypeError);
    JSWebKitSharedScript* castedThisObj = static_cast<JSWebKitSharedScript*>(asObject(thisValue));
    return castedThisObj->addEventListener(exec, args);
}

JSValue JSC_HOST_CALL jsWebKitSharedScriptPrototypeFunctionRemoveEventListener(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.inherits(&JSWebKitSharedScript::s_info))
        return throwError(exec, TypeError);
    JSWebKitSharedScript* castedThisObj = static_cast<JSWebKitSharedScript*>(asObject(thisValue));
    return castedThisObj->removeEventListener(exec, args);
}

JSValue JSC_HOST_CALL jsWebKitSharedScriptPrototypeFunctionDispatchEvent(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.inherits(&JSWebKitSharedScript::s_info))
        return throwError(exec, TypeError);
    JSWebKitSharedScript* castedThisObj = static_cast<JSWebKitSharedScript*>(asObject(thisValue));
    WebKitSharedScript* imp = static_cast<WebKitSharedScript*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    Event* evt = toEvent(args.at(0));


    JSC::JSValue result = jsBoolean(imp->dispatchEvent(evt, ec));
    setDOMException(exec, ec);
    return result;
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, WebKitSharedScript* object)
{
    return getDOMObjectWrapper<JSWebKitSharedScript>(exec, globalObject, object);
}
WebKitSharedScript* toWebKitSharedScript(JSC::JSValue value)
{
    return value.inherits(&JSWebKitSharedScript::s_info) ? static_cast<JSWebKitSharedScript*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(SHARED_SCRIPT)
