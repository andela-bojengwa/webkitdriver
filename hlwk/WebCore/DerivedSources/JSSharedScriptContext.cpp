/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(SHARED_SCRIPT)

#include "JSSharedScriptContext.h"

#include "Event.h"
#include "EventListener.h"
#include "JSEvent.h"
#include "JSEventListener.h"
#include "JSSharedScriptContext.h"
#include "KURL.h"
#include "RegisteredEventListener.h"
#include "SharedScriptContext.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSharedScriptContext);

/* Hash table */

static const HashTableValue JSSharedScriptContextTableValues[4] =
{
    { "self", DontDelete, (intptr_t)jsSharedScriptContextSelf, (intptr_t)setJSSharedScriptContextSelf },
    { "name", DontDelete|ReadOnly, (intptr_t)jsSharedScriptContextName, (intptr_t)0 },
    { "onerror", DontDelete, (intptr_t)jsSharedScriptContextOnerror, (intptr_t)setJSSharedScriptContextOnerror },
    { 0, 0, 0, 0 }
};

static JSC_CONST_HASHTABLE HashTable JSSharedScriptContextTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 15, JSSharedScriptContextTableValues, 0 };
#else
    { 9, 7, JSSharedScriptContextTableValues, 0 };
#endif

/* Hash table for prototype */

static const HashTableValue JSSharedScriptContextPrototypeTableValues[4] =
{
    { "addEventListener", DontDelete|Function, (intptr_t)jsSharedScriptContextPrototypeFunctionAddEventListener, (intptr_t)3 },
    { "removeEventListener", DontDelete|Function, (intptr_t)jsSharedScriptContextPrototypeFunctionRemoveEventListener, (intptr_t)3 },
    { "dispatchEvent", DontDelete|Function, (intptr_t)jsSharedScriptContextPrototypeFunctionDispatchEvent, (intptr_t)1 },
    { 0, 0, 0, 0 }
};

static JSC_CONST_HASHTABLE HashTable JSSharedScriptContextPrototypeTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 3, JSSharedScriptContextPrototypeTableValues, 0 };
#else
    { 8, 7, JSSharedScriptContextPrototypeTableValues, 0 };
#endif

static const HashTable* getJSSharedScriptContextPrototypeTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSSharedScriptContextPrototypeTable);
}
const ClassInfo JSSharedScriptContextPrototype::s_info = { "SharedScriptContextPrototype", 0, 0, getJSSharedScriptContextPrototypeTable };

void* JSSharedScriptContextPrototype::operator new(size_t size, JSGlobalData* globalData)
{
    return globalData->heap.allocate(size);
}

bool JSSharedScriptContextPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, getJSSharedScriptContextPrototypeTable(exec), this, propertyName, slot);
}

bool JSSharedScriptContextPrototype::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticFunctionDescriptor<JSObject>(exec, getJSSharedScriptContextPrototypeTable(exec), this, propertyName, descriptor);
}

static const HashTable* getJSSharedScriptContextTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSSharedScriptContextTable);
}
const ClassInfo JSSharedScriptContext::s_info = { "SharedScriptContext", &JSSharedScriptContextBase::s_info, 0, getJSSharedScriptContextTable };

JSSharedScriptContext::JSSharedScriptContext(NonNullPassRefPtr<Structure> structure, PassRefPtr<SharedScriptContext> impl)
    : JSSharedScriptContextBase(structure, impl)
{
}

JSSharedScriptContext::~JSSharedScriptContext()
{
    impl()->invalidateEventListeners();
}

bool JSSharedScriptContext::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSharedScriptContext, Base>(exec, getJSSharedScriptContextTable(exec), this, propertyName, slot);
}

bool JSSharedScriptContext::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSSharedScriptContext, Base>(exec, getJSSharedScriptContextTable(exec), this, propertyName, descriptor);
}

JSValue jsSharedScriptContextSelf(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    JSSharedScriptContext* castedThis = static_cast<JSSharedScriptContext*>(asObject(slot.slotBase()));
    UNUSED_PARAM(exec);
    SharedScriptContext* imp = static_cast<SharedScriptContext*>(castedThis->impl());
    return toJS(exec, castedThis->globalObject(), WTF::getPtr(imp->self()));
}

JSValue jsSharedScriptContextName(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    JSSharedScriptContext* castedThis = static_cast<JSSharedScriptContext*>(asObject(slot.slotBase()));
    UNUSED_PARAM(exec);
    SharedScriptContext* imp = static_cast<SharedScriptContext*>(castedThis->impl());
    return jsString(exec, imp->name());
}

JSValue jsSharedScriptContextOnerror(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    JSSharedScriptContext* castedThis = static_cast<JSSharedScriptContext*>(asObject(slot.slotBase()));
    UNUSED_PARAM(exec);
    SharedScriptContext* imp = static_cast<SharedScriptContext*>(castedThis->impl());
    if (EventListener* listener = imp->onerror()) {
        if (JSObject* jsFunction = listener->jsFunction(imp->scriptExecutionContext()))
            return jsFunction;
    }
    return jsNull();
}

void JSSharedScriptContext::put(ExecState* exec, const Identifier& propertyName, JSValue value, PutPropertySlot& slot)
{
    lookupPut<JSSharedScriptContext, Base>(exec, propertyName, value, getJSSharedScriptContextTable(exec), this, slot);
}

void setJSSharedScriptContextSelf(ExecState* exec, JSObject* thisObject, JSValue value)
{
    // Shadowing a built-in object
    static_cast<JSSharedScriptContext*>(thisObject)->putDirect(Identifier(exec, "self"), value);
}

void setJSSharedScriptContextOnerror(ExecState* exec, JSObject* thisObject, JSValue value)
{
    UNUSED_PARAM(exec);
    SharedScriptContext* imp = static_cast<SharedScriptContext*>(static_cast<JSSharedScriptContext*>(thisObject)->impl());
    JSDOMGlobalObject* globalObject = static_cast<JSSharedScriptContext*>(thisObject);
    imp->setOnerror(globalObject->createJSAttributeEventListener(value));
}

JSValue JSC_HOST_CALL jsSharedScriptContextPrototypeFunctionAddEventListener(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    JSSharedScriptContext* castedThisObj = toJSSharedScriptContext(thisValue.toThisObject(exec));
    if (!castedThisObj)
        return throwError(exec, TypeError);
    return castedThisObj->addEventListener(exec, args);
}

JSValue JSC_HOST_CALL jsSharedScriptContextPrototypeFunctionRemoveEventListener(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    JSSharedScriptContext* castedThisObj = toJSSharedScriptContext(thisValue.toThisObject(exec));
    if (!castedThisObj)
        return throwError(exec, TypeError);
    return castedThisObj->removeEventListener(exec, args);
}

JSValue JSC_HOST_CALL jsSharedScriptContextPrototypeFunctionDispatchEvent(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    JSSharedScriptContext* castedThisObj = toJSSharedScriptContext(thisValue.toThisObject(exec));
    if (!castedThisObj)
        return throwError(exec, TypeError);
    SharedScriptContext* imp = static_cast<SharedScriptContext*>(castedThisObj->impl());
    ExceptionCode ec = 0;
    Event* evt = toEvent(args.at(0));


    JSC::JSValue result = jsBoolean(imp->dispatchEvent(evt, ec));
    setDOMException(exec, ec);
    return result;
}

SharedScriptContext* toSharedScriptContext(JSC::JSValue value)
{
    return value.inherits(&JSSharedScriptContext::s_info) ? static_cast<JSSharedScriptContext*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(SHARED_SCRIPT)
